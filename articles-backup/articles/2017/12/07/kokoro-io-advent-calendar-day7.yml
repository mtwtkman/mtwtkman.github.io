title: kokoro.io のフロントエンド事情　
slug: kokoro-io-advent-calendar-day7
date: 2017/12/07 00:00:00
tags:
  - kokoro.io
publish: true
body: |-
  この記事は[kokoro.ioアドベントカレンダー](https://adventar.org/calendars/2519)7日目の記事です。5, 6日分が空席なので、ご自由に。

  今回はkokoro.ioのフロントエンド事情についてつらつらと書きます。

  先に断っておくと、フロントエンドのスペシャリストでもない(むしろ申し訳程度)し先進的な技術選択や技術的挑戦は特にしていません。

  # 使用している技術要素
  基本的にはTypeScript + VueJSをwebpackでES2015にトランスパイルする今では当たり前の組み合わせです。

  VueJSは状態管理とSPAのラウティングを目的としてvuexとvue-routerを使用しています。UIコンポーネントは使っていません。

  ## なぜVueJSなのか
  [kamichiduさん](https://twitter.com/kamichidu)が環境を整えてくれたからその流れでという感じです。思ったほど学習コスト高くなくていい感じです。

  kokoro.ioではSFCではなくvueテンプレートとコンポーネントとスタイルを別ファイルで分けています。

  下のような構成になります。

  ```sh
  ComponentA
    - index.ts (エントリポイント)
    - ComponentA.vue (vueテンプレート)
    - ComponentA.vue.ts (コンポーネント定義)
    - style.css (スタイル)
    - ChildComponent
      - ...以下同様
  ```

  これも歴史的経緯です。

  # VueJSのはなし
  VueJSはkokoro.ioで初めて触りました。それまではmithril.jsとかMariontteJSくらいしかまともに触ったFWはありませんでした。
  なので色々トンチンカンなことをしでかしてます。

  ## vuex を誤解していた
  かつて、親子関係を意識していなかったコンポーネント設計を見直すためにそれまでのpropsのバケツリレーでは限界が見えて来たので、[vuex](https://vuex.vuejs.org/ja/intro.html)導入を決めました。

  仕事してるし、なんか怠けたりする必要があったのでなんだかんでvuex導入には約1ヶ月くらいかかったのですがなんとか動く感じになりました。

  vuex導入に際して私は「コンポーネントの構成に合わせてvuexもネストさせなくてはいけない」という使命感に支配され、そんな風に実装して今に至ります。

  ただ、私はvuexについて大きな誤解をしていました。vuexはあくまでグローバルステートをコンポーネントの階層問わずいい感じにアクセスできるようにしてくれるだけであって、それはコンポーネントの構造とは全く無関係なわけです。

  kokoro.ioで言えばどんな階層からも知りたい状態として「選択中のチャンネル」(これをアクティブチャンネルと呼びます)が挙げられます。それ以外の例えばチャット表示画面の一つのメッセージを表現するコンポーネントの状態をチャンネル一覧が知る必要はありません。

  コンポーネントが自分自身の状態を管理するのはdataの役目なので、つまりそういうことです。ここを履き違えるとrootレベルのactionからモジュールレベルのmutaionを呼び出したり、モジュールレベルのmutaionsにrootStateが頻発する可能性が出て来て結果的にvuexクソ！！みたいな短絡をおこしかねません。(馬鹿げていますが、本当に起きていました)

  それともう一つ、管理したいのはアクティブチャンネルがなんなのかであってモデル層をどうこうするのとは切り離して考えるべきです。

  意味がわからないと思いますが、チャンネルオブジェクト諸々プロパティを更新するのにaction経由でやってました。本来はモデル層にメソッドを生やしてやるべきだというのに。

  ```js
  // actionの定義
  {
    async fetchMessages({state}): {
      const resp = await state.request(state.activeChannel.id)
      resp.map(c => {
        ....
      })
    }
  }
  ```

  みたいなことをしていて、完全にクソです。
  普通にコンポーネント内で

  ```js
    yaruzoHandler(): {
      this.activeChannel.fetchMessages()
    }
  ```

  とかでいい。VueJS 初心者だったとかいう次元の話でもないので虚しい。　

  ここではチャンネルを例に出してるけどチャンネルだけじゃないし、まあ人生いろいろあります。

  ### 何が言いたいのか
  vuexはシンプルに使うべきです。モデル層のロジックはモデルに生やすべきだし、グローバルステートをこねくり回す責務だけ突っ込めばいい。という当たり前の結論です。すいません。

  ## vue-property-decorator が素晴らしい
  素晴らしい。decorator はガンガン使っていきたい。みなさん有効にしましょう。現場からは以上です。

  ## その他
  webpack は別に慣れてるので特にアレだし、TypeScriptはいいですね、としか言いようがない。今、VueJS関連で一番の関心はVueJSのUIコンポーネントです。気が熟したら[element](http://element.eleme.io/#/en-US/component/installation)か何かに乗り換えようと考えています。

  Bootstrapの何が嫌かというとjQuery依存な点です。jQueryは別に嫌いじゃないですけど、依存が存在する状態自体は嫌いです。

  そんなところかな。明日はpgrhoさんです。楽しみにしましょう。

  おしまい
