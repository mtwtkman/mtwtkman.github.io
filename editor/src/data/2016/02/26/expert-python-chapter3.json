{"title": "python\u306e__new__\u3068\u304btype\u306a\u3069", "body": "python\u30b3\u30fc\u30c9\u306e\u8aad\u307f\u66f8\u304d\u7df4\u7fd2\u306e\u305f\u3081\u306b\u4fbf\u5229\u30c4\u30fc\u30eb\u306e[percol](https://github.com/mooz/percol)\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u59cb\u3081\u307e\u3057\u305f\u3002\n\n`percol.finder`\u3068\u3044\u3046\u6587\u5b57\u5217\u691c\u7d22\u51e6\u7406\u3092\u3057\u3066\u308b\u3063\u307d\u3044\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u30e1\u30bf\u30af\u30e9\u30b9\u304c\u4f7f\u308f\u308c\u3066\u3044\u305f\u306e\u3067\u30e1\u30bf\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u30a8\u30ad\u30d1\u30a4\u3092\u8aad\u307f\u76f4\u3057\u307e\u3057\u305f\u3002\n\n\u3064\u3063\u3066\u3082\u3001`percol.finder.Finder`\u30af\u30e9\u30b9\u306f[\u305f\u3060\u306e\u62bd\u8c61\u57fa\u5e95\u30af\u30e9\u30b9\u3068\u3044\u3046\u3060\u3051\u3063\u307d\u3044\u3002](https://github.com/mooz/percol/blob/master/percol/finder.py#L11-L37)\n\n\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306a\u3093\u3066\u9ad8\u5ea6\u306a\u3053\u3068\u3092\u3059\u308b\u5834\u9762\u306f\u4e2d\u3005\u306a\u3044\u3068\u601d\u3046\u3051\u3069\u3001\u3068\u308a\u3042\u3048\u305a`__new__`\u3068`type()`\u306b\u3064\u3044\u3066\u5fd8\u308c\u305f\u304f\u306a\u3044\u306e\u3067\u30e1\u30e2\u3002\n\n```\n$ python -V\nPython 3.5.0\n```\n\n# \\_\\_new\\_\\_\n`__new__`\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3088\u3046\u3068\u3059\u308b\u6642\u306b\u6bce\u56de\u5b9f\u884c\u3055\u308c\u308b\u3002\u30a8\u30ad\u30d1\u30a4\u7684\u306b\u306f`meta-constructor`\u3068\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3002\n\n```python\nclass C(object):\n  def __new__(cls, *args, **kwargs):\n      print('args: {}'.format(args))\n      print('kargs: {}'.format(kwargs))\n      print('__new__ called.')\n      ins = object.__new__(cls)\n      print('created instance')\n      ins.hoge = 'hoge'\n      return ins\n\n  def __init__(self, arg):\n      print('__init__ called.')\n      self._fuga = arg\n\n  @property\n  def fuga(self):\n      return self._fuga + self.hoge\n\n\nprint(C('fuga').fuga)\n# args: ('fuga',)\n# kargs: {}\n# __new__ called.\n# created instance\n# __init__ called.\n# fugahoge\n```\n\n`__new__`\u306f\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5f15\u6570\u306b\u3068\u3063\u3066\u5fc5\u305a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3055\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3002\u3064\u307e\u308a\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u524d\u306b\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u716e\u308b\u306a\u308b\u713c\u304f\u306a\u308a\u81ea\u7531\u306b\u3044\u3058\u308a\u5012\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u308f\u3051\u3060\u3002\n\n\u3067\u3001\u3053\u306e`C`\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u5834\u5408\u3001\u5b50\u30af\u30e9\u30b9\u304b\u3089\u89aa\u30af\u30e9\u30b9\u306e`__init__()`\u3092\u547c\u3073\u51fa\u3059\u306b\u306f`super()`\u3092\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n```pytyhon\nclass C(object):\n    def __new__(cls, *args, **kwargs):\n        print('C.__new__ called.')\n        return object.__new__(cls)\n\n    def __init__(self):\n        print('C.__init__ called.')\n\n\nclass D(C):\n    def __init__(self):\n        print('D.__init__() called')\n\n\nclass E(C):\n    def __init__(self):\n        super().__init__()\n        print('E.__init__() called')\n\n\nprint(D())\n# C.__new__ called.\n# D.__init__() called\n# <__main__.D object at 0x104616f28>\n\nprint(E())\n# C.__new__ called.\n# C.__init__ called.\n# E.__init__() called\n# <__main__.E object at 0x104616f98>\n```\n\n\u306a\u308b\u307b\u3069\u3002\n\n# metaclass\u3068type\n`metaclass`\u306f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3059\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u306b\u306a\u308b\u3002python2\u3067\u306f`__metaclass__`\u3068\u3044\u3046\u30af\u30e9\u30b9\u5c5e\u6027\u3002\n\n`metaclass`\u306f`type()`\u3068\u540c\u3058\u5f62\u5f0f\u306e\u5f15\u6570\u3092\u53d6\u308b\u95a2\u6570\u304c\u6307\u5b9a\u3059\u308b\u3002\n\n```python\ndef mymetaclass(cls, base, _dict):\n  if '__cat__' in _dict:\n      _dict['__cat__'] = \\\n          'oh! my {}'.format(_dict.get('__cat__', ''))\n  return type(cls, base, _dict)\n\n\nclass A(object, metaclass=mymetaclass):\n    __cat__ = 'neko'\n\n\nprint(a.__cat__)\n# oh! my neko\n```\n\n\u5168\u304f\u5b9f\u7528\u7684\u306a\u4f8b\u3067\u306f\u306a\u3044\u3051\u3069\u3001\u30af\u30e9\u30b9\u306e\u5c5e\u6027\u3092\u81ea\u7531\u306b\u64cd\u4f5c\u3067\u304d\u308b\u3002\u3068\u3044\u3046\u304b\u3001`type()`\u306b\u6e21\u3059\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u5909\u3048\u3066\u3057\u307e\u3048\u3070\u81ea\u7531\u306b\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5909\u66f4\u3067\u304d\u3066\u3057\u307e\u3046\u3002\n\n\u30a8\u30ad\u30d1\u30a4\u306b\u3082\n\n>For changing the read-write attributes or adding new ones, metaclasses can be avoided for simpler solutions, based on dynamic changes over the class instance.\n\n\u3068\u3044\u3046\u3075\u3046\u306b\u66f8\u3044\u3066\u3042\u308b\u3057\u3001\u305d\u3046\u6c17\u8efd\u306b\u4f7f\u3063\u3066\u3044\u3044\u3082\u306e\u3067\u306f\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308b\u3002(\u3068\u3044\u3046\u304b\u3001\u4f7f\u3048\u306a\u3044\u3060\u308d\u3046\u3002)\n\n\u3067\u3001\u30a8\u30ad\u30d1\u30a4\u306e\u3053\u306e\u30c1\u30e3\u30d7\u30bf\u306e\u6700\u5f8c\u306b\u30af\u30e9\u30b9\u3092\u62e1\u5f35\u3059\u308b\u30d1\u30c3\u30c1\u306e\u5b9f\u88c5\u304c\u3042\u308b\u306e\u3067\u307b\u307c\u4e38\u30b3\u30d4\u3002\n\n```python\ndef enhancer_1(cls):\n  cls.contracted_name = ''.join(\n      l for l in cls.__name__ if l.isupper()\n  )\n\n\ndef enhancer_2(cls):\n    def logger(func):\n        def wrapper(*args, **kwargs):\n            print('logging!')\n            return func(*args, **kwargs)\n        return wrapper\n    for el in dir(cls):\n        if el.startswith('_'):\n            continue\n        v = getattr(cls, el)\n        if not hasattr(v, '__func__'):\n            continue\n        setattr(cls, el, logger(v))\n\n\ndef enhance(cls, *enhancers):\n    for e in enhancers:\n        e(cls)\n\n\nclass ThisIsMyClass(object):\n    def hi(self):\n        return 'hi'\n\n\nenhance(ThisIsMyClass, enhancer_1, enhancer_2)\nins = ThisIsMyClass()\nassert ins.hi() == 'hi'\nassert ins.__class__.contracted_name == 'TIMC'\n```\n\n\u306a\u304a\u3001\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f7f\u3046\u3079\u304d\u6642\u304c\u6765\u3001\u9069\u5207\u306b\u4f7f\u3048\u308b\u6642\u304c\u6765\u308b\u306e\u304b\u30ac\u30c1\u4e0d\u660e\u3002", "publish": true, "tags": ["python"], "date": "2016/02/26 12:32:48", "slug": "expert-python-chapter3"}