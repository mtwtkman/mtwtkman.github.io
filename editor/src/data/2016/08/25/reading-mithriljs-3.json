{"title": "mithriljs\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080(3)", "body": "`build`\u306e\u4e2d\u8eab\u8aad\u3080\u305e\u301c\u301c\u301c\u301c\n\n[\u3053\u3053](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L916)\n\n\u307e\u305a\u9577\u3044\u30b3\u30e1\u30f3\u30c8\u304c\u76ee\u3092\u5f15\u304f\u306e\u3067\u305d\u308c\u3092\u7247\u4ed8\u3051\u308b\u3002\n```javascript\nfunction build(\n  parentElement,\n  parentTag,\n  parentCache,\n  parentIndex,\n  data,\n  cached,\n  shouldReattach,\n  index,\n  editable,\n  namespace,\n  configs\n) {\n  /*\n   * `build` is a recursive function that manages creation/diffing/removal\n   * of DOM elements based on comparison between `data` and `cached` the\n   * diff algorithm can be summarized as this:\n   *\n   * 1 - compare `data` and `cached`\n   * 2 - if they are different, copy `data` to `cached` and update the DOM\n   *     based on what the difference is\n   * 3 - recursively apply this algorithm for every array and for the\n   *     children of every virtual element\n```\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n1. `data`\u3068`cached`\u3092\u6bd4\u8f03\u3059\u308b\n2. \u5dee\u5206\u304c\u3042\u308c\u3070`cached`\u306b`data`\u3092\u30b3\u30d4\u30fc\u3057\u3066\u5dee\u5206\u306b\u57fa\u3065\u3044\u305f\u66f4\u65b0\u3092DOM\u306b\u5bfe\u3057\u3066\u884c\u3046\n3. \u5168\u3066\u306e`data`\u306e\u914d\u5217\u3068\u4eee\u60f3\u8981\u7d20\u306e\u5b50\u306b\u5bfe\u3057\u3066\u4e0a\u8a18\u5de5\u7a0b\u3092\u5168\u3066\u518d\u5e30\u7684\u306b\u9069\u7528\u3059\u308b\n\n\u306a\u304b\u306a\u304b\u30b7\u30f3\u30d7\u30eb\u3060\u3002\u305d\u3057\u3066\u3001\u5dee\u5206\u7523\u51fa\u306e\u8981\u3068\u306a\u308b`data`\u3068`cached`\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u304c\u7d9a\u304f\u3002\n```javascript\n   * The `cached` data structure is essentially the same as the previous\n   * redraw's `data` data structure, with a few additions:\n   * - `cached` always has a property called `nodes`, which is a list of\n   *    DOM elements that correspond to the data represented by the\n   *    respective virtual element\n   * - in order to support attaching `nodes` as a property of `cached`,\n   *    `cached` is *always* a non-primitive object, i.e. if the data was\n   *    a string, then cached is a String instance. If data was `null` or\n   *    `undefined`, cached is `new String(\"\")`\n   * - `cached also has a `configContext` property, which is the state\n   *    storage object exposed by config(element, isInitialized, context)\n   * - when `cached` is an Object, it represents a virtual element; when\n   *    it's an Array, it represents a list of elements; when it's a\n   *    String, Number or Boolean, it represents a text node\n```\n\n`cached`\u306f\u524d\u56de\u518d\u63cf\u753b\u3057\u305f`data`\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u672c\u8cea\u7684\u306b\u306f\u540c\u3058\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308b\u3002\u4ee5\u4e0b\u88dc\u8db3\u3002\n- `cached`\u306f\u5e38\u306b`nodes`\u3068\u547c\u3070\u308c\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u3002`nodes`\u306f\u305d\u308c\u305e\u308c\u306e\u4eee\u60f3\u8981\u7d20\u306b\u5bfe\u5fdc\u3059\u308bDOM\u8981\u7d20\u306e\u30ea\u30b9\u30c8\u3067\u3042\u308b\u3002\n- `cached`\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066`nodes`\u3092\u304f\u3063\u3064\u3051\u3089\u308c\u308b\u3088\u3046\u306b`cached`\u306f*\u5e38\u306b*\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3067\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002(\u4f8b\u3048\u3070\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u306fcached\u306b\u304a\u3044\u3066\u306fString\u578b\u3068\u306a\u308b\u3002`null`\u3084`undefined`\u3067\u3042\u308c\u3070cached\u306f`new String('')`\u3068\u3059\u308b)\n- `cached`\u306f`configContext`\u30d7\u30ed\u30d1\u30c6\u30a3\u3082\u6301\u3063\u3066\u3044\u308b\u3002\u3053\u308c\u306f`config`\u306b\u3088\u3063\u3066\u4f5c\u6210\u3055\u308c\u305f\u72b6\u614b\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3042\u308b\u3002\n- `cached`\u304cObject\u578b\u3067\u3042\u308b\u5834\u5408\u3001\u4eee\u60f3\u8981\u7d20\u3092\u8868\u3057\u3066\u3044\u308b\u3002Array\u578b\u3060\u3063\u305f\u5834\u5408\u306f\u8981\u7d20\u306e\u30ea\u30b9\u30c8\u3067\u3042\u308a\u3001String, Number, Boolean\u578b\u306e\u5834\u5408\u306f\u30c6\u30ad\u30b9\u30c8\u30ce\u30fc\u30c9\u3068\u306a\u308b\u3002\n\n\u3064\u307e\u308a\u3001`cached`\u306f\u7d14\u7c8b\u306ajavascript\u306e\u578b\u3067\u306f\u306a\u304fDOM\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u5b50\u30ce\u30fc\u30c9\u3092\u6301\u3061\u3046\u308b\u72b6\u614b\u3067\u3042\u308b\u3053\u3068\u3089\u3057\u3044\u3002\n\n\u4ee5\u964d\u306f\u6b8b\u308a\u306e\u5f15\u6570\u306b\u3064\u3044\u3066\u306e\u30b3\u30e1\u30f3\u30c8\u3002\n```javascript\n   * `parentElement` is a DOM element used for W3C DOM API calls\n   * `parentTag` is only used for handling a corner case for textarea\n   * values\n   * `parentCache` is used to remove nodes in some multi-node cases\n   * `parentIndex` and `index` are used to figure out the offset of nodes.\n   * They're artifacts from before arrays started being flattened and are\n   * likely refactorable\n   * `data` and `cached` are, respectively, the new and old nodes being\n   * diffed\n   * `shouldReattach` is a flag indicating whether a parent node was\n   * recreated (if so, and if this node is reused, then this node must\n   * reattach itself to the new parent)\n   * `editable` is a flag that indicates whether an ancestor is\n   * contenteditable\n   * `namespace` indicates the closest HTML namespace as it cascades down\n   * from an ancestor\n   * `configs` is a list of config functions to run after the topmost\n   * `build` call finishes running\n   *\n   * there's logic that relies on the assumption that null and undefined\n   * data are equivalent to empty strings\n   * - this prevents lifecycle surprises from procedural helpers that mix\n   *   implicit and explicit return statements (e.g.\n   *   function foo() {if (cond) return m(\"div\")}\n   * - it simplifies diffing code\n   */\n```\n| \u5f15\u6570 | \u8aac\u660e |\n|------|------|\n|parentElement|W3C DOM API\u304c\u547c\u3093\u3067\u3044\u308bDOM\u8981\u7d20|\n|parentTag|textarea\u306e\u5024\u306e\u51e6\u7406\u306e\u5834\u5408\u306b\u306e\u307f\u4f7f\u308f\u308c\u308b|\n|parentCache|\u8907\u6570\u306e\u30ce\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306b\u30ce\u30fc\u30c9\u3092\u524a\u9664\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b|\n|parentIndex, index|\u30ce\u30fc\u30c9\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u7b97\u51fa\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b|\n|data|\u5dee\u5206\u7b97\u51fa\u306e\u65b0\u3057\u3044\u65b9|\n|cached|\u5dee\u5206\u7b97\u51fa\u306e\u53e4\u3044\u65b9|\n|shouldReattach|\u89aa\u30ce\u30fc\u30c9\u3092\u518d\u4f5c\u6210\u3059\u308b\u304b\u3057\u306a\u3044\u304b\u3092\u5224\u5b9a\u3059\u308b\u30d5\u30e9\u30b0|\n|editable|\u7956\u5148\u306e\u8981\u7d20\u304ccontenteditable\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u30d5\u30e9\u30b0|\n|namespace|\u76f4\u8fd1\u306eHTML\u540d\u524d\u7a7a\u9593(\u7956\u5148\u304b\u3089\u30ab\u30b9\u30b1\u30fc\u30c9\u30c0\u30a6\u30f3\u3057\u3066\u304f\u308b)|\n|configs|build\u306e\u5b9f\u884c\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306b\u52d5\u304fconfig\u95a2\u6570\u306e\u30ea\u30b9\u30c8|\n\n\u3067\u3001\u3053\u306e\u51e6\u7406\u3067\u3084\u3063\u3066\u308b\u3053\u3068\u3092\u4e0a\u304b\u3089\u898b\u3066\u3044\u304f\u3068`data`\u304ctoString\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u3001cache\u3092\u4f5c\u308a\u3001`data`\u306e\u30c7\u30fc\u30bf\u578b\u306b\u3088\u3063\u3066\u51e6\u7406\u3092\u5206\u3051\u3066\u3044\u308b\u3002\n\n```javascript\n  data = dataToString(data)\n  if (data.subtree === \"retain\") return cached\n  cached = makeCache(data, cached, index, parentIndex, parentCache)\n\n  if (isArray(data)) {\n    return buildArray(\n      data,\n      cached,\n      parentElement,\n      index,\n      parentTag,\n      shouldReattach,\n      editable,\n      namespace,\n      configs)\n  } else if (data != null && isObject(data)) {\n    return buildObject(\n      data,\n      cached,\n      editable,\n      parentElement,\n      index,\n      shouldReattach,\n      namespace,\n      configs)\n  } else if (!isFunction(data)) {\n    return handleTextNode(\n      cached,\n      data,\n      index,\n      parentElement,\n      shouldReattach,\n      editable,\n      parentTag)\n  } else {\n    return cached\n  }\n}\n```\n\n- Array\u3060\u3063\u305f\u3089`buildArray`\n- Object\u3060\u3063\u305f\u3089`buildObject`\n- \u4e0a\u306e\u30c7\u30fc\u30bf\u578b\u3067\u3082Function\u3067\u3082\u306a\u304b\u3063\u305f\u3089`handleTextNode`\n- \u305d\u308c\u3067\u3082\u6761\u4ef6\u304c\u7570\u306a\u308c\u3070cached\u3092\u8fd4\u5374\n\n\u3068\u305d\u308c\u305e\u308c\u5206\u5c90\u3057\u3066\u3044\u308b\u3002\n\n`buildArray`\u306f\u4f55\u3092\u3057\u3066\u3044\u308b\u3093\u3060\u308d\u3046\u3002[\u3053\u3053](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L584)\n\n```javascript\nfunction buildArray(\n  data,\n  cached,\n  parentElement,\n  index,\n  parentTag,\n  shouldReattach,\n  editable,\n  namespace,\n  configs\n) {\n  data = flatten(data)\n  var nodes = []\n  var intact = cached.length === data.length\n  var subArrayCount = 0\n```\n\n`key`\u3092\u4f7f\u3046\u3053\u3068\u3067\u4f59\u8a08\u306a\u8981\u7d20\u306e\u518d\u4f5c\u6210\u3092\u907f\u3051\u3066\u3044\u308b\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3053\u3046\u3060\u3002\n\n```javascript\n  // keys algorithm: sort elements without recreating them if keys are\n  // present\n  //\n  // 1) create a map of all existing keys, and mark all for deletion\n  // 2) add new keys to map and mark them for addition\n  // 3) if key exists in new list, change action from deletion to a move\n  // 4) for each key, handle its corresponding action as marked in\n  //    previous steps\n```\n\n1. \u5b58\u5728\u3057\u3066\u3044\u308b\u5168\u3066\u306ekeys\u306e\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3001\u524a\u9664\u51e6\u7406\u306e\u305f\u3081\u306b\u30de\u30fc\u30af\u3059\u308b\u3002\n2. \u30de\u30c3\u30d7\u306b\u65b0\u3057\u3044keys\u3092\u8ffd\u52a0\u3057\u3001\u305d\u308c\u3089\u3092\u8ffd\u52a0\u51e6\u7406\u306e\u305f\u3081\u306b\u30de\u30fc\u30af\u3059\u308b\u3002\n3. key\u304c\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u306a\u3089\u3001\u524a\u9664\u51e6\u7406\u304b\u3089\u79fb\u52d5\u3078\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5909\u66f4\u3059\u308b\u3002\n4. \u305d\u308c\u305e\u308c\u306ekey\u306b\u3064\u3044\u3066\u3001\u30b9\u30c6\u30c3\u30d73\u3067\u6c7a\u3081\u3089\u308c\u305f\u30de\u30fc\u30af\u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u51e6\u7406\u3059\u308b\u3002\n\n\u308f\u304b\u308b\u3088\u3046\u3067\u30a4\u30de\u30a4\u30c1\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u5927\u4eba\u3057\u304f\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u9032\u3081\u308b\u3002\n\n```javascript\n  var existing = {}\n  var shouldMaintainIdentities = false\n\n  forKeys(cached, function (attrs, i) {\n    shouldMaintainIdentities = true\n    existing[cached[i].attrs.key] = {action: DELETION, index: i}\n  })\n```\n\n\u306a\u308b\u307b\u3069\u3001`cached`\u3092\u30eb\u30fc\u30d7\u3057\u3066\u3001\u30a2\u30af\u30b7\u30e7\u30f3\u3092`DELTION`\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3002\u30b9\u30c6\u30c3\u30d71\u3060\u3002\n\n```javascript\n  buildArrayKeys(data)\n```\n\n\u4eca\u5ea6\u306f`buildArrayKeys`\u3067\u3059\u304b(;\u00b4\u0414`)\n```javascript\nfunction buildArrayKeys(data) {\n  var guid = 0\n  forKeys(data, function () {\n    forEach(data, function (attrs) {\n      if ((attrs = attrs && attrs.attrs) && attrs.key == null) {\n        attrs.key = \"__mithril__\" + guid++\n      }\n    })\n    return 1\n  })\n}\n```\n\n`data`\u306e\u5c5e\u6027\u3092\u30eb\u30fc\u30d7\u3057\u3066`key`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u8b58\u5225\u5b50\u3068\u3057\u3066\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3002\u30b9\u30c6\u30c3\u30d72\u3060\u3002\n\n\u3067\u3001`cached`\u304c\u5b58\u5728\u3057\u3066\u3055\u3048\u3044\u308c\u3070`diffKeys`\u3092\u547c\u3093\u3067\u7d42\u308f\u308a\u3002\n\n```javascript\n  if (shouldMaintainIdentities) {\n    cached = diffKeys(data, cached, existing, parentElement)\n  }\n  // end key algorithm\n```\n\n\u3060\u308b\u3044\n\n```javascript\nfunction diffKeys(data, cached, existing, parentElement) {\n  var keysDiffer = data.length !== cached.length\n\n  if (!keysDiffer) {\n    forKeys(data, function (attrs, i) {\n      var cachedCell = cached[i]\n      return keysDiffer = cachedCell &&\n        cachedCell.attrs &&\n        cachedCell.attrs.key !== attrs.key\n    })\n  }\n\n  if (keysDiffer) {\n    return handleKeysDiffer(data, existing, cached, parentElement)\n  } else {\n    return cached\n  }\n}\n```\n\n`data`\u3068`cached`\u306e\u8981\u7d20\u6570\u304c\u540c\u3058\u3067\u3042\u308c\u3070`cached`\u3068`data`\u306e`key`\u304c\u9055\u3046\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057cached\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\u3002\n\n\u305d\u3046\u3067\u306a\u3051\u308c\u3070`handleKeysDiffer`\u3092\u547c\u3073\u51fa\u3057\u3066\u8fd4\u5374\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\u3002\u3057\u3093\u3069\u3044\n\n```javascript\nfunction handleKeysDiffer(data, existing, cached, parentElement) {\n  forKeys(data, function (key, i) {\n    existing[key = key.key] = existing[key] ? {\n      action: MOVE,\n      index: i,\n      from: existing[key].index,\n      element: cached.nodes[existing[key].index] ||\n        $document.createElement(\"div\")\n    } : {action: INSERTION, index: i}\n  })\n```\n\n`data`\u306e`key`\u304c\u3059\u3067\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u5834\u5408\u306f`MOVE`\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3002`element`\u304c`cached`\u306e`nodes`\u304c\u6301\u3064\u8981\u7d20\u304b\u3001\u65b0\u898f\u4f5c\u6210\u306ediv\u8981\u7d20\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n`data`\u306e`key`\u304c\u307e\u3060\u5b58\u5728\u3057\u3066\u3044\u306a\u3051\u308c\u3070`INSERTION`\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3002\n\n\u3067\u3001actions\u306bexisting\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u3092\u6e9c\u3081\u8fbc\u3093\u3067\n\n```javascript\n  var actions = []\n  for (var prop in existing) {\n    if (hasOwn.call(existing, prop)) {\n      actions.push(existing[prop])\n    }\n  }\n```\n\n\u30a2\u30af\u30b7\u30e7\u30f3\u3054\u3068\u306b\u51e6\u7406\u3057\u3066\u308b\u3002\n\n```javascript\n  var changes = actions.sort(sortChanges)\n  var newCached = new Array(cached.length)\n\n  newCached.nodes = cached.nodes.slice()\n\n  forEach(changes, function (change) {\n    var index = change.index\n    if (change.action === DELETION) {\n      clear(cached[index].nodes, cached[index])\n      newCached.splice(index, 1)\n    }\n    if (change.action === INSERTION) {\n      var dummy = $document.createElement(\"div\")\n      dummy.key = data[index].attrs.key\n      insertNode(parentElement, dummy, index)\n      newCached.splice(index, 0, {\n        attrs: {key: data[index].attrs.key},\n        nodes: [dummy]\n      })\n      newCached.nodes[index] = dummy\n    }\n\n    if (change.action === MOVE) {\n      var changeElement = change.element\n      var maybeChanged = parentElement.childNodes[index]\n      if (maybeChanged !== changeElement && changeElement !== null) {\n        parentElement.insertBefore(changeElement,\n          maybeChanged || null)\n      }\n      newCached[index] = cached[change.from]\n      newCached.nodes[index] = changeElement\n    }\n  })\n```\n\n\u5927\u3057\u3066\u96e3\u3057\u3044\u3053\u3068\u3057\u3066\u306a\u3044\u3002`newCached`\u3067`cache`\u3092\u66f4\u65b0\u3057\u3001\u30a2\u30af\u30b7\u30e7\u30f3\u3054\u3068\u306b\u524a\u9664\u3001\u8ffd\u52a0\u3001\u79fb\u52d5\u3092\u3057\u3066\u3044\u308b\u3002\n\n\u3067\u3001\u623b\u3063\u3066\u304f\u308b\u3002\n\n```javascript\n  var cacheCount = 0\n  // faster explicitly written\n  for (var i = 0, len = data.length; i < len; i++) {\n    // diff each item in the array\n    var item = build(\n      parentElement,\n      parentTag,\n      cached,\n      index,\n      data[i],\n      cached[cacheCount],\n      shouldReattach,\n      index + subArrayCount || subArrayCount,\n      editable,\n      namespace,\n      configs)\n\n    if (item !== undefined) {\n      intact = intact && item.nodes.intact\n      subArrayCount += getSubArrayCount(item)\n      cached[cacheCount++] = item\n    }\n  }\n\n  if (!intact) diffArray(data, cached, nodes)\n  return cached\n}\n```\n\n`data`\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066`build`\u3092\u547c\u3073\u51fa\u3057\u518d\u5e30\u51e6\u7406\u3057\u3066\u3044\u308b\u3002\u3000\n\n\u6700\u5f8c\u306e`diffArray`\u306f`data`\u3068`cached`\u306e\u9577\u3055\u304c\u7570\u306a\u308b\u5834\u5408\u306b\u547c\u3070\u308c\u3001\u5185\u5bb9\u3068\u3057\u3066\u306f`nodes`\u304b\u3089`cached`\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u3066`data`\u306e\u9577\u3055\u306b\u5408\u308f\u305b\u3066\u3044\u308b\u3002\n\n`cached`\u306b\u6b8b\u3063\u3066\u3044\u308b\u4e0d\u8981\u306a\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u76ee\u7684\u306e\u3088\u3046\u3060\u3002\n\n\u307e\u3060\u5168\u7136\u7d42\u308f\u3089\u3093\u304c\u3001\u75b2\u308c\u305f\u306e\u3067\u7d9a\u304f", "date": "2016/08/25 20:14:04", "tags": ["javascript", "mithril"], "slug": "reading-mithriljs-3", "publish": true}