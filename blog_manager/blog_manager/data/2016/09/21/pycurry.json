{"title": "python\u3067\u30ab\u30ea\u30fc\u5316", "body": "\u3084\u308a\u5c3d\u304f\u3055\u308c\u3066\u308b\u3060\u308d\u3046\u3051\u3069python\u3067\u30ab\u30ea\u30fc\u5316\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\n\n```\nimport functools\n\n\nclass ArgumentCountError(Exception):\n    pass\n\n\ndef curry(function):\n    name = function.__name__\n    argcount = function.__code__.co_argcount\n    varnames = function.__code__.co_varnames\n    class Factory:\n        def __init__(self, function, params=None):\n            self.function = function\n            self._params = params if params else tuple()\n\n        @property\n        def name(self):\n            return name\n\n        @property\n        def argcount(self):\n            return argcount\n\n        @property\n        def varnames(self):\n            return varnames\n\n        def __call__(self, *args):\n            params = self._params + args\n            if self.argcount < len(params):\n                raise ArgumentCountError\n            elif self.argcount == len(params):\n                return self.function(*args)\n            else:\n                return self.__class__(functools.partial(self.function, *args), params)\n\n        def __str__(self):\n            params = ', '.join(\n                '{}={}'.format(*x) for x in zip(self.varnames, self._params)\n            ) if self._params else 'NO PARAM SUPPLIED'\n            return '<{}: {}>'.format(self.name, params)\n    return Factory(function)\n\n\nif __name__ == '__main__':\n    @curry\n    def add(x, y, z):\n        return x + y + z\n\n    assert add(1, 2, 3) == add(1, 2)(3) == add(1)(2)(3) == 6\n```\n\n\u7279\u306b\u5de5\u592b\u306f\u3057\u3066\u306a\u3044\u3067\u3059", "publish": true, "tags": ["python"], "date": "2016/09/21 22:50:27", "slug": "pycurry"}