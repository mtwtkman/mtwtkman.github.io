{"title": "mithriljs\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080(2)", "body": "\u3055\u3066\u3001\u524d\u56de\u306f`m.mount`\u306e\u5185\u5bb9\u3092\u898b\u305f\u3068\u3053\u308d\u3001\u63cf\u753b\u306b\u3064\u3044\u3066\u306f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3002\n\n`endComputation`\u5185\u3067\u547c\u3093\u3067\u3044\u308b`m.redraw`\u306e\u6b63\u4f53\u3092\u66b4\u3053\u3046\u3002\n\n[\u3053\u3053](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1522)\n```javascript\nm.redraw = function (force) {\n  if (redrawing) return\n  redrawing = true\n  if (force) forcing = true\n  try {\n    // lastRedrawId is a positive number if a second redraw is requested\n    // before the next animation frame\n    // lastRedrawId is null if it's the first redraw and not an event\n    // handler\n    // \u8d85\u610f\u8a33: lastRedrawId\u306f\u30d5\u30ec\u30fc\u30e0\u306e\u66f4\u65b0\u304c\u5fc5\u8981\u306a\u6642\u306b\u6b63\u306e\u6570\u5024\u3092\u6301\u3064\u3002\n    if (lastRedrawId && !force) {\n      // when setTimeout: only reschedule redraw if time between now\n      // and previous redraw is bigger than a frame, otherwise keep\n      // currently scheduled timeout\n      // when rAF: always reschedule redraw\n      // \u8d85\u610f\u8a33: \u30d5\u30ec\u30fc\u30e0\u306e\u66f4\u65b0\u6642\u9593\u304c\u898f\u5b9a\u3092\u8d85\u3048\u3066\u3044\u308c\u3070\u66f4\u65b0\u3059\u308b\n      if ($requestAnimationFrame === global.requestAnimationFrame ||\n          new Date() - lastRedrawCallTime > FRAME_BUDGET) {\n        if (lastRedrawId > 0) $cancelAnimationFrame(lastRedrawId)\n        lastRedrawId = $requestAnimationFrame(redraw, FRAME_BUDGET)\n      }\n    } else {\n      redraw()\n      lastRedrawId = $requestAnimationFrame(function () {\n        lastRedrawId = null\n      }, FRAME_BUDGET)\n    }\n  } finally {\n    redrawing = forcing = false\n  }\n}\n```\n\u3053\u3053\u3067\u306f\u30d5\u30ec\u30fc\u30e0\u306e\u66f4\u65b0\u6709\u7121\u3092\u5224\u5b9a\u3057\u3066\u3044\u308b\u3002\u518d\u63cf\u753b\u51e6\u7406\u306e\u672c\u4f53\u306f`redraw`\u3068\u3044\u3046\u5185\u90e8\u95a2\u6570\u306e\u3088\u3046\u3060\u3002\n\n[\u3053\u3053](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1554)\n```javascript\nfunction redraw() {\n  if (computePreRedrawHook) {\n    computePreRedrawHook()\n    computePreRedrawHook = null\n  }\n  forEach(roots, function (root, i) {\n    var component = components[i]\n    if (controllers[i]) {\n      var args = [controllers[i]]\n      m.render(root,\n        component.view ? component.view(controllers[i], args) : \"\")\n    }\n  })\n  // after rendering within a routed context, we need to scroll back to\n  // the top, and fetch the document title for history.pushState\n  // \u8a33: route\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8(\u3046\u307e\u304f\u8a33\u305b\u306a\u3044)\u5185\u3067\u306e\u63cf\u753b\u5f8c\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30c8\u30c3\u30d7\u306b\u30b9\u30af\u30ed\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n  //     \u5f8chistory.pushState\u3059\u308b\u305f\u3081\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u53d6\u5f97\u3059\u308b\n  if (computePostRedrawHook) {\n    computePostRedrawHook()\n    computePostRedrawHook = null\n  }\n  lastRedrawId = null\n  lastRedrawCallTime = new Date()\n  m.redraw.strategy(\"diff\")\n}\n```\n\u6e9c\u3081\u8fbc\u307e\u308c\u305f`roots`\u306eview\u3092`m.render`\u306b\u6e21\u3057\u3066\u3044\u308b\u3002\u3044\u3088\u3044\u3088\u6838\u5fc3\u306b\u8feb\u3063\u3066\u304d\u305f\u611f\u51fa\u3066\u304d\u305f\u3002\n\n`computePreRedrawHook`\u3068`computePostRedrawHook`\u306f\u8a33\u306b\u66f8\u3044\u3066\u3042\u308b\u51e6\u7406\u3092\u3084\u3063\u3066\u3044\u308b\u3060\u3051\u3002\u63cf\u753b\u304c\u7d42\u308f\u308c\u3070`m.redraw.strategy`\u304cdiff\u306b\u66f4\u65b0\u3055\u308c\u3066\u3001\u5dee\u5206\u3060\u3051\u306e\u66f4\u65b0\u306b\u306a\u308b\u308f\u3051\u3060\u3002\n\n`m.render`\u3092\u898b\u3066\u307f\u3088\u3046\u3002\n\n[\u3053\u3053](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1316)\n```javascript\nm.render = function (root, cell, forceRecreation) {\n  if (!root) {\n    throw new Error(\"Ensure the DOM element being passed to \" +\n      \"m.route/m.mount/m.render is not undefined.\")\n  }\n  var configs = []\n  var id = getCellCacheKey(root)\n  var isDocumentRoot = root === $document\n  var node\n\n  if (isDocumentRoot || root === $document.documentElement) {\n    node = documentNode\n  } else {\n    node = root\n  }\n\n  if (isDocumentRoot && cell.tag !== \"html\") {\n    cell = {tag: \"html\", attrs: {}, children: cell}\n  }\n\n  if (cellCache[id] === undefined) clear(node.childNodes)\n  if (forceRecreation === true) reset(root)\n\n  cellCache[id] = build(\n    node,\n    null,\n    undefined,\n    undefined,\n    cell,\n    cellCache[id],\n    false,\n    0,\n    null,\n    undefined,\n    configs)\n\n  forEach(configs, function (config) { config() })\n}\n```\n\nmithril\u3067\u306f\u4eee\u60f3DOM\u3092cell\u3068\u547c\u3093\u3067\u3044\u308b\u3088\u3046\u3067\u3001`getCellCacheKey`\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u3066\u3044\u308broot\u306e\u4eee\u60f3DOM\u306eid\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u3002\n\n\u3067\u3001node\u306f\u307e\u3055\u306bDOM\u306e\u30ce\u30fc\u30c9\u306e\u4e8b(\u307e\u3055\u306b\u672c\u5f53\u306e\u610f\u5473\u3067\u306eDOM\u30aa\u30d6\u30b8\u30a7\u30af\u30c8)\u3067\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u3066\u3044\u306a\u3044DOM\u306e\u5834\u5408\u3001`clear`\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3002\n\n```javascript\nfunction clear(nodes, cached) {\n  for (var i = nodes.length - 1; i > -1; i--) {\n    if (nodes[i] && nodes[i].parentNode) {\n      try {\n        nodes[i].parentNode.removeChild(nodes[i])\n      } catch (e) {\n        /* eslint-disable max-len */\n        // ignore if this fails due to order of events (see\n        // http://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node)\n        /* eslint-enable max-len */\n      }\n      cached = [].concat(cached)\n      if (cached[i]) unload(cached[i])\n    }\n  }\n  // release memory if nodes is an array. This check should fail if nodes\n  // is a NodeList (see loop above)\n  if (nodes.length) {\n    nodes.length = 0\n  }\n}\n```\n\n`clear`\u306f\u4e00\u756a\u5f8c\u308d\u306e\u5b50\u30ce\u30fc\u30c9\u3092\u89aa\u304b\u3089\u524a\u9664\u3057\u3066\u3044\u308b\u3002\u30eb\u30fc\u30d7\u51e6\u7406\u306e\u5bfe\u8c61\u306e\u9577\u3055\u3092\u5909\u3048\u3066\u3057\u307e\u3046\u502b\u7406\u89b3\u306f\u5225\u306e\u554f\u984c\u3068\u3057\u3066\u3001\u8981\u3059\u308b\u306b\u3053\u308c\u306f\u5b50\u30ce\u30fc\u30c9\u3092\u4e00\u6383\u3059\u308b\u3060\u3051\u306e\u95a2\u6570\u3060\u3002\n\n`m.render`\u306b\u623b\u308d\u3046\u3002\n\n\u3088\u3046\u3084\u304f\u305f\u3069\u308a\u7740\u3044\u305f`build`\u304cDOM\u4f5c\u6210\u306e\u672c\u4f53\u3060\u3002\n\n\u3053\u308c\u304c\u307e\u305f\u3057\u3093\u3069\u305d\u3046\u306a\u306e\u3067\u6b21\u56de", "publish": true, "tags": ["javascript", "mithril"], "date": "2016/08/24 21:42:14", "slug": "reading-mithriljs-2"}